{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Quillscript Language",
	"scopeName": "source.qsc",

	"patterns": [
		{ "include": "#comment"       },
		{ "include": "#router"        },
		{ "include": "#dialogue"      },
		{ "include": "#option"        },
		{ "include": "#label"         },
		{ "include": "#command"       },
		{ "include": "#condition"     },
		{ "include": "#directive"     },
		{ "include": "#tag"           },
		{ "include": "#text"          },
		{ "include": "#concatenation" },
		{ "include": "#instruction"   }
	],

	"repository": {
		"dialogue": {
			"match": "[\\s]*(\\-)(.*?(?=(\\||\\/\\/|\\n)))",

			"captures": {
				"1": { "name": "storage.type.class.qsc" },

				"2": {
					"name": "entity.name.type.class.qsc",

					"patterns": [
						{ "include": "#variable" },
						{ "include": "#definition" },
						{ "include": "#richtext" }
					]
				}
			}
		},

		"option": {
			"match": "[\\s]*(\\*)(.*?(?=(\\||\\/\\/|\\n)))",

			"captures": {
				"1": { "name": "storage.type.enum.qsc" },

				"2": {
					"name": "entity.name.type.enum.qsc",

					"patterns": [
						{ "include": "#variable" },
						{ "include": "#definition" },
						{ "include": "#richtext" }
					]
				}
			}
		},

		"label": {
			"match": "[\\s]*(@|<@>)(.*?(?=(\\||\\/\\/|\\n)))",

			"captures": {
				"1": { "name": "storage.type.namespace.qsc" },

				"2": {
					"name": "entity.name.namespace.qsc",
					"patterns": [ { "include": "#arguments" } ]
				}
			}
		},

		"router": {
			"match": "[\\s]*(\\->|<\\->)(.*?(?=(\\||\\/\\/|\\n)))",

			"captures": {
				"1": { "name": "keyword.control.loop.qsc" },

				"2": {
					"name": "keyword.control.flow.qsc",
					"patterns": [
						{ "include": "#arguments" },
						{ "include": "#variable" },
						{ "include": "#definition" }
					]
				}
			}
		},

		"command": {
			"match": "[\\s]*(\\$)(.*?(?=(\\||\\/\\/|\\n)))",

			"captures": {
				"1": { "name": "storage.type.function.qsc" },
				"2": { "patterns": [ { "include": "#command_instruction" } ] }
			}
		},

		"condition": {
			"match": "[\\s]*(\\? if:|\\? elseif:|\\? else|\\? endif|if:|elseif:|else:|endif|\\?)(.*?(?=(\\||\\/\\/|\\n)))",

			"captures": {
				"1": {
					"name": "keyword.control.conditional.qsc",

					"patterns": [
						{
							"name": "punctuation.terminator.qsc",
							"match": ":"
						}
					]
				},

				"2": {
					"name": "string.qsc",

					"patterns": [
						{ "include": "#variable" },
						{ "include": "#definition" },
						{ "include": "#richtext" },
						{ "include": "#operator" },
						{ "include": "#parentheses" },
						{ "include": "#number" },
						{ "include": "#keyword" },
						{ "include": "#enum" }
					]
				}
			}
		},

		"directive": {
			"match": "[\\s]*(~)[\\s](\\w+)*?(.*?(?=(\\||\\/\\/|\\n)))",

			"captures": {
				"1": { "name": "punctuation.definition.directive.qsc" },

				"3": {
					"name": "entity.name.other.preprocessor.macro.qsc",

					"patterns": [
						{
							"match": "(.*?)\\s(.*)",

							"captures": {
								"1": {
									"patterns": [
										{
											"name": "punctuation.accessor.qsc",
											"match": "\\."
										},

										{ "include": "#variable" },
										{ "include": "#definition" }
									]
								},

								"2": {
									"name": "string.qsc",

									"patterns": [
										{ "include": "#variable" },
										{ "include": "#definition" },
										{ "include": "#richtext" },
										{ "include": "#number" },
										{ "include": "#keyword" },
										{ "include": "#enum" }
									]
								}
							}
						},

						{ "include": "#variable" },
						{ "include": "#definition" }
					]
				}
			}
		},

		"comment": {
			"patterns": [
				{
					"name": "comment.title.qsc",
					"match": "\\b(SCENE|ACT|CHAPTER|SCRIPT|TITLE|HEADER|BOOK|NAME|PART|SECTION|FILE|BRANCH)\\b[ -Z]+"
				},

				{
					"comment": "Capture brackets for editor colorization",
					"match": "((\\s+)?)({|})"
				},

				{
					"name": "comment.qsc",
					"match": "(\\/\\/)(\\<\\>)?(.*)",

					"captures": {
						"2": { "name": "comment.topic.qsc" }
					}
				}
			]
		},

		"text": {
			"name": "string.qsc",
			"match": "(^.*?)(?=(\\/\\/)|(\\n))",

			"captures": {
				"1": {
					"patterns": [
						{ "include": "#definition" },
						{ "include": "#variable" },
						{ "include": "#richtext" }
					]
				}
			}
		},

		"arguments": {
			"match": "(\\()(.*)(\\))",

			"captures": {
				"1": { "name": "punctuation.definition.parameters.begin.qsc" },

				"2": {
					"patterns": [
						{
							"match": "\\,",
							"name": "punctuation.separator.comma.qsc"
						},

						{
							"match": ".",
							"name": "variable.parameter.qsc"
						}
					]
				},

				"3": { "name": "punctuation.definition.parameters.end.qsc" }
			}
		},

		"instruction": {
			"match": "(.*?)(?=(\\||\\/\\/|\\n))",

			"captures": {
				"1": {
					"patterns": [
						{
							"match": "[\\s]*(\\$?)(.*)",

							"captures": {
								"1": { "name": "storage.type.function.qsc" },
								"2": { "patterns": [ { "include": "#command_instruction" } ] }
							}
						}
					]
				}
			}
		},

		"command_instruction": {
			"match": "(.*\\=.*)|(.*)",

			"captures": {
				"1": {
					"patterns": [
						{
							"match": "(.*)(\\=)(.*)",

							"captures": {
								"1": {
									"patterns": [
										{
											"name": "keyword.operator.qsc",
											"match": ":|\\.|\\+|\\-|\\*|\\/|\\%|\\^"
										},
										{
											"name": "entity.name.function.qsc",
											"match": "\\w+"
										}
									]
								},

								"2": { "name": "keyword.operator.assignment.qsc" },

								"3": {
									"name": "string.qsc",

									"patterns": [
										{ "include": "#variable" },
										{ "include": "#parameter" },
										{ "include": "#definition" },
										{ "include": "#richtext" },
										{ "include": "#operator" },
										{ "include": "#parentheses" },
										{ "include": "#number" },
										{ "include": "#keyword" },
										{ "include": "#enum" }
									]
								}
							}
						}
					]
				},

				"2": {
					"patterns": [
						{
							"match": "[\\s]*([\\&\\^\\%]?)(.*)",

							"captures": {
								"1": { "name": "storage.type.function.qsc" },

								"2": {
									"name": "entity.name.function.qsc",

									"patterns": [
										{
											"match": "(.*?)\\s(.*)",

											"captures": {
												"1": {
													"patterns": [
														{
															"name": "punctuation.accessor.qsc",
															"match": "\\."
														},

														{ "include": "#variable" },
														{ "include": "#parameter" },
														{ "include": "#definition" }
													]
												},

												"2": {
													"name": "string.qsc",

													"patterns": [
														{ "include": "#variable" },
														{ "include": "#parameter" },
														{ "include": "#definition" },
														{ "include": "#richtext" },
														{ "include": "#number" },
														{ "include": "#keyword" },
														{ "include": "#enum" }
													]
												}
											}
										},

										{ "include": "#variable" },
										{ "include": "#parameter" },
										{ "include": "#definition" }
									]
								}
							}
						}
					]
				}
			}
		},

		"tag": {
			"match": "[\\s]*(#)(\\w+)",

			"captures": {
				"1": { "name": "variable.other.constant.qsc" },
				"2": { "name": "variable.other.constant.text.qsc" }
			}
		},

		"concatenation": {
			"name": "keyword.operator.concat.qsc",
			"match": "\\|"
		},

		"definition": {
			"name": "variable.other.global.qsc",
			"match": "\\[[^\\s]+\\]"
		},

		"variable": {
			"name": "variable.qsc",
			"match": "{[^\\s]+}"
		},

		"parameter": {
			"name": "parameter.qsc",
			"match": "\\@[^\\s]+\\:"
		},

		"richtext": {
			"name": "entity.name.tag.qsc",
			"match": "<(\\w*).*?>"
		},

		"operator": {
			"name": "keyword.operator.qsc",
			"match": "=|\\~|\\b(and|AND|or|OR)\\b|===|!==|==|!=|>=|<=|(?<!-)>|<|\\+|-(?!>)|\\*|\/|\\%|\\^"
		},

		"parentheses": {
			"name": "meta.brace.round.qsc",
			"match": "\\(|\\)"
		},

		"number": {
			"name": "constant.number.qsc",
			"match": "(?<!\\w)([\\d]+)(?!\\w)"
		},

		"keyword": {
			"name": "constant.language.qsc",
			"match": "\\b(true|false|on|off|null|nullptr)\\b"
		},

		"enum": {
			"name": "variable.other.enummember.qsc",
			"match": "\\b(Log|Success|Warning|Error)|(Defaults|Default|GameOnly|GameAndUI|UIOnly|Unchanged)|(DoNotLock|LockOnCapture|LockAlways|LockInFullscreen)\\b"
		}
	}
}